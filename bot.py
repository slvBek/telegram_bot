import requests
import json
import time
import cv2
import numpy as np
import dlib
import os
import face_recognition
import io
import shutil

# –ó–∞–º–µ–Ω–∏—Ç–µ "YOUR_BOT_TOKEN" –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç BotFather
TOKEN = "6902826036:AAH5JfWSBwzKA9lf45jRZObuNig0g6BBRRk"

# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API Telegram
BASE_URL = f"https://api.telegram.org/bot{TOKEN}/"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
user_languages = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_profiles = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ —Å —Ñ–ª–∞–≥–∞–º–∏
LANGUAGES = {
    "en": "üá∫üá∏ English",
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    "uz": "üá∫üáø O'zbekcha",
}

def reset_profile(chat_id):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –ø–∞–ø–∫–∏ profiles
    profile_path = f"profiles/{chat_id}.json"
    if os.path.exists(profile_path):
        os.remove(profile_path)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –ø–∞–ø–∫–∏ downloads
    downloads_path = "downloads"
    user_photos = user_profiles.get(chat_id, {}).get("media", [])
    for media_file_id in user_photos:
        photo_path = f"{downloads_path}/{media_file_id}.jpg"
        video_path = f"{downloads_path}/{media_file_id}.mp4"
        
        if os.path.exists(photo_path):
            os.remove(photo_path)
        if os.path.exists(video_path):
            os.remove(video_path)

    
    
    if chat_id in user_profiles:
        user_profiles[chat_id] = {}


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message(chat_id, text, reply_markup=None):
    url = BASE_URL + "sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "reply_markup": reply_markup
    }
    response = requests.post(url, data=data)
    return response.json()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
def start(chat_id):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
    send_message(chat_id, text, create_language_keyboard())
    user_states[chat_id] = "SELECT_LANGUAGE"

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def create_language_keyboard():
    languages = list(LANGUAGES.keys())
    keyboard = {
        "keyboard": [],
        "one_time_keyboard": True,
        "resize_keyboard": True  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–Ω–æ–ø–æ–∫
    }
    row = []
    for lang_code in languages:
        row.append({"text": LANGUAGES[lang_code]})
        if len(row) == 3:
            keyboard["keyboard"].append(row)
            row = []
    if row:
        keyboard["keyboard"].append(row)
    return json.dumps(keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
def handle_language_choice(chat_id, language_code):
    if language_code in LANGUAGES:
        user_languages[chat_id] = language_code
        text = "–£–∂–µ –º–∏–ª–ª–∏–æ–Ω—ã –ª—é–¥–µ–π –∑–Ω–∞–∫–æ–º—è—Ç—Å—è –≤ Infinityüòç\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –ø–∞—Ä—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥—Ä—É–∑–µ–πüë´"
        send_message(chat_id, text, create_start_button())
        user_states[chat_id] = "WAITING_FOR_START"
    else:
        send_message(chat_id, "Invalid language choice. Please choose a valid language.")

def create_start_button():
    keyboard = {
        "keyboard": [["üëå –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º"]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    return json.dumps(keyboard)

def create_subscribe_keyboard():
    keyboard = {
        "keyboard": [[{"text": "–ü–æ–¥–ø–∏—Å–∞–ª—Å—è"}]],
        "resize_keyboard": True,
        "one_time_keyboard": True,
    }
    return json.dumps(keyboard)

def handle_start(chat_id, text):
    if text == "üëå –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º" or text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ":
        subscribed_user_id = chat_id
        if is_user_subscribed(subscribed_user_id):
            handle_ok(chat_id, text)
        else:
            subscribe_text = "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:"
            inline_keyboard = [
                [{"text": "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "url": "https://t.me/dlyabota77"}]
            ]
            send_message(chat_id, subscribe_text, json.dumps({"inline_keyboard": inline_keyboard}))
            send_message(chat_id, "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∞–ª—Å—è'.", create_subscribe_keyboard())
            user_states[chat_id] = "WAITING_FOR_SUBSCRIPTION"
    else:
        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ 'üëå –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        send_message(chat_id, text)

def is_user_subscribed(user_id):
    # –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_CHANNEL_USERNAME –Ω–∞ username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
    channel_username = "@dlyabota77"
    
    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–ª–µ–Ω–µ –∫–∞–Ω–∞–ª–∞
    url = f"https://api.telegram.org/bot{TOKEN}/getChatMember"
    params = {"chat_id": channel_username, "user_id": user_id}
    
    response = requests.get(url, params=params)
    data = response.json()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ
    if data["ok"] and data["result"]["status"] == "member":
        return True
    else:
        return False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "üëå ok" –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def handle_ok(chat_id, text):
    if text == "–ü–æ–¥–ø–∏—Å–∞–ª—Å—è" or text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ" or text == "üëå –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º":
        text = "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"
        send_message(chat_id, text)
        user_states[chat_id] = "SELECT_AGE"
    else:
        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ 'üëå –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        send_message(chat_id, text)

def handle_age(chat_id, text):
    if not profile_exists(chat_id):
        user_profiles[chat_id] = {}

    try:
        age = int(text)
        if 10 <= age <= 90:
            # –î–∞–ª–µ–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç
            user_profiles[chat_id]["age"] = age  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            save_user_profile(chat_id)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
            text = "–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–ª–æ–º"
            send_message(chat_id, text, create_gender_keyboard())
            user_states[chat_id] = "SELECT_GENDER"
        else:
            text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 10 –¥–æ 90 –ª–µ—Ç:"
            send_message(chat_id, text)
    except ValueError:
        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 10 –¥–æ 90 –ª–µ—Ç:"
        send_message(chat_id, text)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
def create_gender_keyboard():
    keyboard = {
        "keyboard": [
            ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    return json.dumps(keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–±–æ—Ä –ø–æ–ª–∞
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –∏ –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ
def handle_gender_choice(chat_id, gender):
    if chat_id not in user_profiles:
        user_profiles[chat_id] = {}  # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
    if user_states[chat_id] == "SELECT_GENDER":
        if gender.lower() == "–º—É–∂—á–∏–Ω–∞" or gender.lower() == "–∂–µ–Ω—â–∏–Ω–∞":
            user_profiles[chat_id]["gender"] = gender
            text = "–ö–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ?"
            send_message(chat_id, text, create_match_gender_keyboard())
            user_states[chat_id] = "SELECT_MATCH_GENDER"
        else:
            text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª —Å—Ä–µ–¥–∏ '–ú—É–∂—á–∏–Ω–∞' –∏–ª–∏ '–ñ–µ–Ω—â–∏–Ω–∞':"
            send_message(chat_id, text)
    else:
        text = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start."
        send_message(chat_id, text)

def create_match_gender_keyboard():
    keyboard = {
        "keyboard": [["–î–µ–≤—É—à–∫–∏", "–ü–∞—Ä–Ω–∏", "–í—Å–µ —Ä–∞–≤–Ω–æ"]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    return json.dumps(keyboard)

def handle_match_gender_choice(chat_id, match_gender):
    if user_states.get(chat_id) == "SELECT_MATCH_GENDER":
        if match_gender in ["–î–µ–≤—É—à–∫–∏", "–ü–∞—Ä–Ω–∏", "–í—Å–µ —Ä–∞–≤–Ω–æ"]:
            user_profiles[chat_id]["match_gender"] = match_gender
            save_user_profile(chat_id)
            text = "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?"
            send_message(chat_id, text, create_request_location_keyboard())
            user_states[chat_id] = "WAITING_FOR_LOCATION"
        else:
            text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: '–î–µ–≤—É—à–∫–∏', '–ü–∞—Ä–Ω–∏' –∏–ª–∏ '–í—Å–µ —Ä–∞–≤–Ω–æ'."
            send_message(chat_id, text)
    else:
        text = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start."
        send_message(chat_id, text)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ create_request_location_keyboard
def create_request_location_keyboard():
    keyboard = {
        "remove_keyboard": True
    }
    return json.dumps(keyboard)

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_location –∏ handle_username –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º user_profiles[chat_id]
def handle_location(chat_id, location, first_name):
    if not profile_exists(chat_id):
        user_profiles[chat_id] = {}  # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏

    if location is not None:
        user_profiles[chat_id]["location"] = location
        text = f"–ö–∞–∫ –≤–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å?"
        send_message(chat_id, text, create_request_username_keyboard(first_name))
        user_states[chat_id] = "SELECT_USERNAME"
    else:
        text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ."
        send_message(chat_id, text, create_request_location_keyboard())
    save_user_profile(chat_id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
def get_user_info(chat_id):
    url = BASE_URL + "getChatMember"
    params = {"chat_id": chat_id, "user_id": chat_id}
    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json().get("result", {})
    return {}

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ò–º—è"
def create_request_username_keyboard(first_name):
    keyboard = {
        "keyboard": [[{"text": f"{first_name}"}]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    return json.dumps(keyboard)

def handle_username(chat_id, text):
    if not profile_exists(chat_id):
        user_profiles[chat_id] = {}  # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏

    username = text.strip('@')  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª "@" –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profiles[chat_id]["username"] = username
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ñ–∞–π–ª JSON
    save_user_profile(chat_id)
    
    text = "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:"
    skip_button_keyboard = create_skip_button_keyboard()  # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    send_message(chat_id, text, skip_button_keyboard)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    user_states[chat_id] = "TELL_ABOUT"

def save_user_profile(chat_id):
    profile_path = f"profiles/{chat_id}.json"

    if not os.path.exists("profiles"):
        os.makedirs("profiles")

    existing_profile = load_existing_profile(chat_id)

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ user_profiles[chat_id]
        existing_profile.update(user_profiles[chat_id])

        with open(profile_path, "w", encoding='utf-8') as file:
            json.dump(existing_profile, file, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"Error saving profile for {chat_id}: {e}")

def load_existing_profile(chat_id):
    profile_path = f"profiles/{chat_id}.json"

    if os.path.exists(profile_path):
        with open(profile_path, "r", encoding='utf-8') as file:
            return json.load(file)
    else:
        return {}


def create_skip_button_keyboard():
    keyboard = {
        "keyboard": [["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    return json.dumps(keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ
def handle_about(chat_id, about):
    if about == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        text = "–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ, –µ–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        send_message(chat_id, text)
        user_states[chat_id] = "UPLOAD_MEDIA"
    else:
        user_profiles[chat_id]["about"] = about
        text = "–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ, –µ–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        user_states[chat_id] = "UPLOAD_MEDIA"
        save_user_profile(chat_id)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        send_message(chat_id, text)

def handle_media(chat_id, message):
    # –í –∫–æ–Ω—Ü–µ —É–¥–∞–ª–∏ —ç—Ç–æ
    if chat_id not in user_profiles:
        user_profiles[chat_id] = {}

    if "media" not in user_profiles[chat_id]:
        user_profiles[chat_id]["media"] = []

    user_profiles[chat_id]["media"].append(message["photo"][-1]["file_id"])
    media_count = len(user_profiles[chat_id]["media"])

    if media_count == 1:
        text = "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ - 1 –∏–∑ 2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–æ—Ç–æ"
        send_message(chat_id, text, create_confirm_media_keyboard())
        user_states[chat_id] = "CONFIRM_MEDIA"
    elif media_count == 2:
        text = "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ - 2 –∏–∑ 2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–æ—Ç–æ"
        send_message(chat_id, text, create_confirm_media_keyboard())
        user_states[chat_id] = "CONFIRM_MEDIA"  # –ò–∑–º–µ–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ "CONFIRM_MEDIA" –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

def profile_exists(chat_id):
    return chat_id in user_profiles and "media" in user_profiles[chat_id]

def create_confirm_media_keyboard():
    keyboard = {
        "keyboard": [["–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ"]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    return json.dumps(keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def create_confirm_keyboard():
    keyboard = {
        "keyboard": [["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    return json.dumps(keyboard)

# –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
def download_video_file(file_id):
    file_path = f"downloads/{file_id}.mp4"  # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
    url = BASE_URL + f"getFile?file_id={file_id}"
    response = requests.get(url)
    
    if response.status_code == 200:
        file_info = response.json().get("result", {})
        file_path = f"downloads/{file_id}.mp4"
        file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_info['file_path']}"
        video_data = requests.get(file_url).content
        
        with open(file_path, 'wb') as video_file:
            video_file.write(video_data)
            
        return file_path
    else:
        return None

def download_photo_file(file_id):
    file_path = f"downloads/{file_id}.jpg"  # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    url = BASE_URL + f"getFile?file_id={file_id}"
    response = requests.get(url)

    if response.status_code == 200:
        file_info = response.json().get("result", {})
        file_path = f"downloads/{file_id}.jpg"
        file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_info['file_path']}"
        photo_data = requests.get(file_url).content

        with open(file_path, 'wb') as photo_file:
            photo_file.write(photo_data)

        return file_path
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {response.status_code}")
        return None

def compare_video_and_photo(chat_id, video_path):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    photos = []
    for photo_file_id in user_profiles[chat_id]["media"]:
        photo_path = download_photo_file(photo_file_id)
        if photo_path:
            photos.append(photo_path)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
    video_capture = cv2.VideoCapture(video_path)
    match_found = False


    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ª–∏—Ü –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    for photo_path in photos:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–∏—Ü–∞
        photo = face_recognition.load_image_file(photo_path)
        face_encoding_photo = face_recognition.face_encodings(photo)

        if not face_encoding_photo:
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ –≤–∏–¥–µ–æ
        success, frame = video_capture.read()
        while success:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–∏—Ü –∏–∑ –∫–∞–¥—Ä–∞ –≤–∏–¥–µ–æ
            face_locations = face_recognition.face_locations(frame)
            face_encodings = face_recognition.face_encodings(frame, face_locations)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ª–∏—Ü
            for face_encoding_video in face_encodings:
                matches = face_recognition.compare_faces(face_encoding_photo, face_encoding_video)
                if True in matches:
                    match_found = True
            success, frame = video_capture.read()

    if not match_found:
        text = "–õ–∏—á–Ω–æ—Å—Ç—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
        buttons_keyboard = {
            "keyboard": [
                ["–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]
            ],
            "resize_keyboard": True,
            "one_time_keyboard": True
        }
        send_message(chat_id, text, json.dumps(buttons_keyboard))
        user_states[chat_id] = "CONFIRM_IDENTITY"
    else:
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        text = "–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –õ–∏—á–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
        keyboard = {
            "keyboard": [["–ì–æ—Ç–æ–≤–æ"]],
            "resize_keyboard": True,
            "one_time_keyboard": True
        }
        send_message(chat_id, text, json.dumps(keyboard))
        user_states[chat_id] = "WAITING_FOR_CONFIRMATION"


def download_video_file(file_id):
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists("downloads"):
        os.makedirs("downloads")

    file_path = f"downloads/{file_id}.mp4"  # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
    url = BASE_URL + f"getFile?file_id={file_id}"
    response = requests.get(url)

    if response.status_code == 200:
        file_info = response.json().get("result", {})
        file_path = f"downloads/{file_id}.mp4"
        file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_info['file_path']}"
        video_data = requests.get(file_url).content

        with open(file_path, 'wb') as video_file:
            video_file.write(video_data)

        return file_path
    else:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
def send_photo(chat_id, photo_paths, user_data):
    url = BASE_URL + "sendMediaGroup"

    media = []
    for i, path in enumerate(photo_paths):
        media_item = {
            "type": "photo",
            "media": "attach://photo" + str(i),
            "caption": user_data if i == 0 else ""  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        }
        media.append(media_item)

    files = {f"photo{i}": (f"photo{i}.jpg", open(path, 'rb')) for i, path in enumerate(photo_paths)}
    data = {
        "chat_id": chat_id,
        "media": json.dumps(media)
    }

    response = requests.post(url, data=data, files=files)
    return response.json()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /confirm
def confirm(chat_id):
    for photo_file_id in user_profiles[chat_id]["media"]:
        download_photo_file(photo_file_id)
    user_profile = user_profiles.get(chat_id, {})
    user_profile_from_file = load_existing_profile(chat_id)
    user_profile.update(user_profile_from_file)
    user_profiles[chat_id] = user_profile
    username = user_profile.get("username", "")
    age = user_profile.get("age", "")
    location = user_profile.get("location", "")
    identity_status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ‚úÖ" if user_profile.get("identity_confirmed", False) else "–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ‚ùé"
    about = user_profile.get("about", "")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = f"–ò–º—è: {username}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {location}\n–õ–∏—á–Ω–æ—Å—Ç—å: {identity_status}"

    if about:
        user_data += f"\n–û —Å–µ–±–µ: {about}"
    # send_message(chat_id, text)
    photos = user_profile.get("media", [])
    photo_paths = [f"downloads/{photo_file_id}.jpg" for photo_file_id in photos]
    send_photo(chat_id, photo_paths, user_data)

    text = "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    keyboard = {
        "keyboard": [
            ["–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ"],
            ["–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã"]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    send_message(chat_id, text, json.dumps(keyboard))

def create_reaction_keyboard():
    keyboard = {
        "keyboard": [
            ["üíô", "‚ö°", "‚ùå", "üò¥"],
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    return json.dumps(keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
def handle_updates(updates):
    for update in updates:
        if "message" in update:
            chat_id = update["message"]["chat"]["id"]
            message = update["message"]
            first_name = message.get("from", {}).get("first_name", "")
            
            if "location" in message:
                # –≠—Ç–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
                handle_location(chat_id, message["location"], first_name)
            elif "photo" in message:
                # –≠—Ç–æ —Ñ–æ—Ç–æ
                text = message.get("caption")
                handle_media(chat_id, message)
            else:
                text = message.get("text")
                if chat_id not in user_states:
                    start(chat_id)
                elif user_states[chat_id] == "SELECT_LANGUAGE":
                    if text in LANGUAGES.values():
                        lang_code = [k for k, v in LANGUAGES.items() if v == text][0]
                        handle_language_choice(chat_id, lang_code)
                elif user_states[chat_id] == "WAITING_FOR_START":
                    handle_start(chat_id, text)
                elif user_states[chat_id] == "WAITING_FOR_SUBSCRIPTION":
                    if "text" in message:   
                        if message["text"] == "–ü–æ–¥–ø–∏—Å–∞–ª—Å—è":
                            subscribed_user_id = message["from"]["id"]
                            if is_user_subscribed(subscribed_user_id):
                                handle_ok(chat_id, text)
                            else:
                                text = "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥–ø–∏—Å–∞–ª—Å—è'."
                                inline_keyboard = [
                                    [{"text": "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "url": "https://t.me/dlyabota77"}]
                                ]
                                send_message(chat_id, text, json.dumps({"inline_keyboard": inline_keyboard}))
                                send_message(chat_id, "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∞–ª—Å—è'.", create_subscribe_keyboard())
                elif user_states[chat_id] == "SELECT_AGE":
                    handle_age(chat_id, text)
                elif user_states[chat_id] == "SELECT_GENDER":
                    if text in ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]:
                        handle_gender_choice(chat_id, text)
                elif user_states[chat_id] == "SELECT_MATCH_GENDER":
                    if text in ["–î–µ–≤—É—à–∫–∏", "–ü–∞—Ä–Ω–∏", "–í—Å–µ —Ä–∞–≤–Ω–æ"]:
                        handle_match_gender_choice(chat_id, text)
                elif user_states[chat_id] == "WAITING_FOR_LOCATION":
                    handle_location(chat_id, text, first_name)
                elif user_states[chat_id] == "SELECT_USERNAME":
                    handle_username(chat_id, text)
                elif user_states[chat_id] == "TELL_ABOUT":
                    handle_about(chat_id, text)
                elif user_states[chat_id] == "CONFIRM_MEDIA":
                    if text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ":
                        text = "–•–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å?"
                        keyboard = {
                            "keyboard": [
                                ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]
                            ],
                            "resize_keyboard": True,
                            "one_time_keyboard": True
                        }
                        send_message(chat_id, text, json.dumps(keyboard))
                        user_states[chat_id] = "CONFIRM_IDENTITY"
                elif user_states[chat_id] == "CONFIRM_IDENTITY":
                    if text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
                        text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä—É–≥–ª–æ–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Ç–µ–ª–µ–≥—Ä–∞–º–º (–Ω–µ –±–æ–ª–µ–µ 20 —Å–µ–∫—É–Ω–¥)."
                        send_message(chat_id, text)
                        user_states[chat_id] = "RECORDING_VIDEO"
                        user_profiles[chat_id]["video_start_time"] = time.time()
                    elif text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                        confirm(chat_id)
                        user_states[chat_id] = "RESET_PROFILE_OPTIONS"
                    elif text == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å":
                        text = "–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä—É–≥–ª–æ–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Ç–µ–ª–µ–≥—Ä–∞–º–º (–Ω–µ –±–æ–ª–µ–µ 20 —Å–µ–∫—É–Ω–¥)."
                        send_message(chat_id, text)
                        user_states[chat_id] = "RECORDING_VIDEO"
                        user_profiles[chat_id]["video_start_time"] = time.time()
                elif user_states[chat_id] == "RECORDING_VIDEO":
                    file_path = None
                    if "video_note" in message:
                        video_file_id = message["video_note"]["file_id"]
                        video_duration = message["video_note"]["duration"]
                        if video_duration > 20:
                            text = "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 —Å–µ–∫—É–Ω–¥."
                            keyboard = {
                                "keyboard": [
                                    ["–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]
                                ],
                                "resize_keyboard": True,
                                "one_time_keyboard": True
                            }
                            send_message(chat_id, text, json.dumps(keyboard))
                            user_states[chat_id] = "CONFIRM_IDENTITY"
                        else:
                            file_path = download_video_file(video_file_id)
                        if file_path:
                            text = "–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞..."
                            send_message(chat_id, text)
                            photo_file_id = user_profiles[chat_id]["media"][0]
                            photo_path = download_photo_file(photo_file_id)
                            
                            if photo_path:
                                compare_video_and_photo(chat_id, file_path)
                        
                elif user_states[chat_id] == "WAITING_FOR_CONFIRMATION":
                    if text == "–ì–æ—Ç–æ–≤–æ":
                        user_profiles[chat_id]["identity_confirmed"] = True
                        confirm(chat_id)
                        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_profiles[chat_id] = {}
                        user_states[chat_id] = None
                        user_states[chat_id] = "RESET_PROFILE_OPTIONS"
                elif user_states[chat_id] == "RESET_PROFILE_OPTIONS":
                    if text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ":
                        # –°–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è
                        reset_profile(chat_id)
                        subscribed_user_id = update["message"]["from"]["id"]
                        if is_user_subscribed(subscribed_user_id):
                            handle_ok(chat_id, text)
                        else:
                            handle_start(chat_id, text)

                        # –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø
                        # start(chat_id)
                    elif text == "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã":
                        if chat_id in user_profiles:
                            match_gender = user_profiles[chat_id].get("match_gender", "")
                            profiles_to_show = []

                            if match_gender == "–î–µ–≤—É—à–∫–∏":
                                profiles_to_show = [profile for profile in user_profiles.values() if profile.get("gender") == "–ñ–µ–Ω—â–∏–Ω–∞"]
                                send_message(chat_id, "üôçüèª‚Äç‚ôÄÔ∏èüîç", create_reaction_keyboard())
                            elif match_gender == "–ü–∞—Ä–Ω–∏":
                                profiles_to_show = [profile for profile in user_profiles.values() if profile.get("gender") == "–ú—É–∂—á–∏–Ω–∞"]
                                send_message(chat_id, "üôéüèª‚Äç‚ôÇÔ∏èüîç", create_reaction_keyboard())
                            else:
                                profiles_to_show = [profile for profile in user_profiles.values() if profile.get("gender") in ["–ñ–µ–Ω—â–∏–Ω–∞", "–ú—É–∂—á–∏–Ω–∞"]]
                                send_message(chat_id, "üôçüèª‚Äç‚ôÄÔ∏èüôéüèª‚Äç‚ôÇÔ∏èüîç", create_reaction_keyboard())

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            for profile in profiles_to_show:    
                                username = profile.get("username", "")
                                age = profile.get("age", "")
                                location = profile.get("location", "")
                                identity_status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ‚úÖ" if profile.get("identity_confirmed", False) else "–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ‚ùé"
                                about = profile.get("about", "")
            
                                user_data = f"–ò–º—è: {username}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {location}\n–õ–∏—á–Ω–æ—Å—Ç—å: {identity_status}"

                                if about:
                                    user_data += f"\n–û —Å–µ–±–µ: {about}"
            
                                photos = profile.get("media", [])
                                photo_paths = [f"downloads/{photo_file_id}.jpg" for photo_file_id in photos]
                                send_photo(chat_id, photo_paths, user_data)
                        else:
                            send_message(chat_id, "–ü—Ä–µ–∂–¥–µ —á–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É.")
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç (–¥–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
                        
                    # user_states[chat_id] = None

                # ... (–≤–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    offset = None
    while True:
        url = BASE_URL + "getUpdates"
        params = {"offset": offset, "timeout": 30}
        response = requests.get(url, params=params)
        updates = response.json().get("result", [])
        
        for update in updates:
            offset = update["update_id"] + 1
            handle_updates([update])


if __name__ == "__main__":
    main()